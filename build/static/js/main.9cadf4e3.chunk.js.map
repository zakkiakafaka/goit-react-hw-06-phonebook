{"version":3,"sources":["components/contactsForm/ContactsForm.js","components/contactsList/ContactsList.js","components/section/Section.js","components/filter/ContactsFilter.js","redux/contacts/contactsAction.js","components/Contacts.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["ContactsForm","state","name","number","onHandleSubmit","e","preventDefault","props","checkDublicateName","alert","addContact","setState","onHandleChange","target","value","onSubmit","this","type","onChange","pattern","title","required","Component","ContactsList","contacts","onDeleteContact","className","map","contact","onClick","id","Section","children","ContactsFilter","filter","setFilter","createAction","deleteContact","getAllContacts","filterContacts","Contacts","items","a","axios","post","data","console","log","delete","some","getFilteredClients","toLowerCase","includes","get","Object","keys","key","connect","dispatch","App","contactsReducer","createReducer","payload","_","filterReducer","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9cadf4e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\n\nimport PropTypes from 'prop-types';\nclass ContactsForm extends Component {\n\n    state = {\n      \n        name: \"\",\n        number: \"\",\n        \n        \n    }\n    \n\n    onHandleSubmit = (e) => {\n        e.preventDefault()\n        if (this.props.checkDublicateName(this.state.name)) {\n            alert(`${this.state.name} already exist`)\n            return\n        } \n       \n        this.props.addContact(this.state )\n        \n        \n        this.setState({\n           \n            name: \"\",\n            number:\"\",\n\n\n        })\n   \n    };\n    onHandleChange = (e) => {\n        const { name, value } = e.target\n        this.setState({ [name]: value }); //___v [name] prihodit name i price\n    }\n\n\n    render() {\n        return (\n            \n            <form onSubmit={this.onHandleSubmit}>\n\n                <>\n                    Name\n                      <input\n                        type=\"text\"\n                        onChange={this.onHandleChange}\n                        value={this.state.name}\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                        required\n                    />\n                </>\n                <>\n                    Number\n                      <input\n                        type=\"tel\"\n                        onChange={this.onHandleChange}\n                        value={this.state.number}\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                        required\n                    />\n                </>\n                <button type=\"submit\" >Add Contact</button>\n            </form>\n            \n               \n        );\n    }\n}\n\nContactsForm.propTypes = {\n    onHandleSubmit: PropTypes.func,\n    name: PropTypes.string,\n    number: PropTypes.string,\n}.isRequired;\n\nexport default ContactsForm;","import React from 'react'\nimport PropTypes from 'prop-types';\n\n\nconst ContactsList = ({contacts, onDeleteContact}) => {\n\n    return (\n        <>\n        <div className=\"card\">\n            \n            <ul className=\"contactItem\">\n                \n                {contacts.map(contact => (\n                    \n                    <li key= {contact.id } >\n                        <p>{contact.name}</p>\n                        <p>{contact.number}</p>\n                        <button type=\"button\" onClick={onDeleteContact} id={contact.id}>\n                            Delete</button>\n                    </li>\n                ))}\n            \n                \n            </ul>\n            </div>\n        </>\n    );\n}\n\nContactsList.propTypes = {\n    onDeleteContact: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    })),\n}\nexport default ContactsList;\n","import React from 'react'\n\n\nconst Section = ({title, children}) => {\n    return (\n        \n        <>\n            <h2>{title}</h2>\n            {children}\n            \n        </>\n    );\n}\n\nexport default Section;","import React from 'react'\nimport PropTypes from 'prop-types';\n\n\nconst ContactsFilter = ({ filter, setFilter }) => {\n    return (\n        <>\n        <label >Filter:\n            <input type=\"text\"\n                value={filter}\n                onChange={setFilter}\n            />\n            </label>\n        </>\n    );\n}\n\nContactsFilter.propTypes = {\n    filter: PropTypes.string,\n    setFilter: PropTypes.func,\n}.isRequired;\nexport default ContactsFilter;","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const addContact = createAction(\"contacts/addContact\");\nexport const deleteContact = createAction(\"contacts/deleteContact\");\nexport const getAllContacts = createAction(\"contacts/getAllContacts\");\nexport const filterContacts = createAction(\"contacts/filterContacts\");\n","import React, { Component } from \"react\";\nimport ContactsForm from \"./contactsForm/ContactsForm\";\nimport ContactsList from \"./contactsList/ContactsList\";\nimport Section from \"./section/Section\";\nimport { connect } from \"react-redux\";\nimport ContactsFilter from \"./filter/ContactsFilter\";\nimport axios from \"axios\";\nimport { addContact, deleteContact, filterContacts, getAllContacts } from \"../redux/contacts/contactsAction\";\n\nclass Contacts extends Component {\n  state = {\n    contacts: {\n      items: [],\n      filter: \"\"\n    }\n  };\n\n  async componentDidMount() {\n    try {\n      const { data } = await axios.get(`https://shop-7319e-default-rtdb.firebaseio.com/contacts.json`);\n\n      if (data) {\n        const contacts = Object.keys(data).map(key => ({ id: key, ...data[key] }));\n        this.props.getAllContacts(contacts);\n      }\n\n      console.log(data);\n    } catch (error) {}\n  }\n\n  addContact = async contact => {\n    try {\n      const { data } = await axios.post(`https://shop-7319e-default-rtdb.firebaseio.com/contacts.json`, contact);\n      this.props.addContact({ ...contact, id: data.name });\n      console.log(data);\n    } catch (error) {}\n  };\n\n  onDeleteContact = async e => {\n    try {\n      const { id } = e.target;\n      await axios.delete(`https://shop-7319e-default-rtdb.firebaseio.com/contacts/${id}.json`);\n      this.props.deleteContact(id);\n    } catch (error) {}\n  };\n\n  checkDublicateName = name => {\n    return this.props.contacts.some(contact => contact.name === name);\n  };\n\n  setFilter = e => {\n    const { value } = e.target;\n    this.props.filterContacts(value);\n  };\n\n  getFilteredClients = () => {\n    console.log(this.props);\n    return this.props.contacts.filter(contact => contact.name.toLowerCase().includes(this.props.filter.toLowerCase()));\n  };\n  render() {\n    return (\n      <>\n        <Section title=\"Phonebook\">\n          <ContactsForm addContact={this.addContact} checkDublicateName={this.checkDublicateName} />\n        </Section>\n\n        <Section title=\"Find contact by name\">\n          <ContactsFilter filter={this.props.filter} setFilter={this.setFilter} />\n        </Section>\n\n        <Section title=\"Contacts\">\n          <ContactsList\n            contacts={this.props.contacts}\n            onDeleteContact={this.onDeleteContact}\n            contacts={this.getFilteredClients()}\n          />\n        </Section>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: state.contacts,\n    filter: state.filter\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addContact: contacts => {\n      dispatch(addContact(contacts));\n    },\n    deleteContact: contacts => {\n      dispatch(deleteContact(contacts));\n    },\n    getAllContacts: contacts => {\n      dispatch(getAllContacts(contacts));\n    },\n    filterContacts: contacts => {\n      dispatch(filterContacts(contacts));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Contacts);\n","import React from 'react'\nimport Contacts from './Contacts'\n\nconst App = () => {\n    return (\n        <>\n            <Contacts/>\n            </>\n    );\n}\n\nexport default App;","import { createReducer } from \"@reduxjs/toolkit\";\nimport { addContact, deleteContact, getAllContacts, filterContacts } from \"./contactsAction\";\n\nexport const contactsReducer = createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) => [...state.filter(contact => contact.id !== payload)],\n  [getAllContacts]: (_, { payload }) => payload\n});\n\nexport const filterReducer = createReducer(\"\", {\n  [filterContacts]: (_, { payload }) => payload\n});\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport { contactsReducer, filterReducer } from \"./contacts/contactsReducer\";\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer\n});\n\nconst store = configureStore({\n  reducer: rootReducer\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App\";\n// import \"./index.css\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}